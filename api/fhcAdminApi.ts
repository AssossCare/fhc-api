/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { EndpointDistributorStatusDto } from "../model/EndpointDistributorStatusDto"

export class fhcAdminApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError) {
    throw e
  }

  /**
   *
   * @summary bcpStatus
   */
  bcpStatusUsingGET(): Promise<EndpointDistributorStatusDto | any> {
    let _body = null

    const _url = this.host + `/admin/bcp` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new EndpointDistributorStatusDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary loglevel
   * @param loglevel loglevel
   * @param _package package
   */
  loglevelUsingPOST(loglevel: string, _package: string): Promise<string | any> {
    let _body = null

    const _url =
      this.host +
      `/admin/loglevel/${encodeURIComponent(String(loglevel))}` +
      "?ts=" +
      new Date().getTime() +
      (_package ? "&_package=" + encodeURIComponent(String(_package)) : "")
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary updateBcpStatus
   */
  updateBcpStatusUsingPOST(): Promise<any | Boolean> {
    let _body = null

    const _url = this.host + `/admin/bcp` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => true)
      .catch(err => this.handleError(err))
  }
}

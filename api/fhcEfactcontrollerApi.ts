/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class fhcEfactcontrollerApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  sendBatchUsingGET(
    nihii: string,
    language: string,
    keystoreId: string,
    tokenId: string,
    passPhrase: string,
    ssin: string,
    firstName: string,
    lastName: string
  ): Promise<Array<models.EfactMessage> | any> {
    let _body = null

    const _url =
      this.host +
      "/efact/{nihii}/{language}"
        .replace("{nihii}", nihii + "")
        .replace("{language}", language + "") +
      "?ts=" +
      new Date().getTime() +
      (keystoreId ? "&keystoreId=" + keystoreId : "") +
      (tokenId ? "&tokenId=" + tokenId : "") +
      (passPhrase ? "&passPhrase=" + passPhrase : "") +
      (ssin ? "&ssin=" + ssin : "") +
      (firstName ? "&firstName=" + firstName : "") +
      (lastName ? "&lastName=" + lastName : "")
    const headers = this.headers
    headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.EfactMessage(it)))
      .catch(err => this.handleError(err))
  }
  sendBatchUsingPOST(
    keystoreId: string,
    tokenId: string,
    passPhrase: string,
    batch: models.InvoicesBatch
  ): Promise<models.EfactSendResponse | any> {
    let _body = null
    _body = batch

    const _url =
      this.host +
      "/efact/batch" +
      "?ts=" +
      new Date().getTime() +
      (keystoreId ? "&keystoreId=" + keystoreId : "") +
      (tokenId ? "&tokenId=" + tokenId : "") +
      (passPhrase ? "&passPhrase=" + passPhrase : "")
    const headers = this.headers
    headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.EfactSendResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}

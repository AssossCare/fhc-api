/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { ConsultCurrentSsinResponse } from "../model/ConsultCurrentSsinResponse"
import { PersonMid } from "../model/PersonMid"
import { RegisterPersonResponseDto } from "../model/RegisterPersonResponseDto"
import { SearchBySSINReplyDto } from "../model/SearchBySSINReplyDto"
import { SearchPhoneticReplyDto } from "../model/SearchPhoneticReplyDto"

export class fhcConsultrnApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary history
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param ssin ssin
   */
  historyUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ssin: string
  ): Promise<ConsultCurrentSsinResponse> {
    let _body = null

    const _url =
      this.host +
      `/consultrn/history/${encodeURIComponent(String(ssin))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new ConsultCurrentSsinResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary identify
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param ssin ssin
   */
  identifyUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ssin: string
  ): Promise<SearchBySSINReplyDto> {
    let _body = null

    const _url =
      this.host + `/consultrn/${encodeURIComponent(String(ssin))}` + "?ts=" + new Date().getTime()
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new SearchBySSINReplyDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary registerPerson
   * @param body mid
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   */
  registerPersonUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    body?: PersonMid
  ): Promise<RegisterPersonResponseDto> {
    let _body = null
    _body = body

    const _url = this.host + `/consultrn` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new RegisterPersonResponseDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary search
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param dateOfBirth dateOfBirth
   * @param lastName lastName
   * @param firstName firstName
   * @param middleName middleName
   * @param gender gender
   * @param tolerance tolerance
   * @param limit limit
   */
  searchUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    dateOfBirth: number,
    lastName: string,
    firstName?: string,
    middleName?: string,
    gender?: string,
    tolerance?: number,
    limit?: number
  ): Promise<SearchPhoneticReplyDto> {
    let _body = null

    const _url =
      this.host +
      `/consultrn/${encodeURIComponent(String(dateOfBirth))}/${encodeURIComponent(
        String(lastName)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (firstName ? "&firstName=" + encodeURIComponent(String(firstName)) : "") +
      (middleName ? "&middleName=" + encodeURIComponent(String(middleName)) : "") +
      (gender ? "&gender=" + encodeURIComponent(String(gender)) : "") +
      (tolerance ? "&tolerance=" + encodeURIComponent(String(tolerance)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new SearchPhoneticReplyDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}

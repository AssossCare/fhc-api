/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { DmgConsultation } from "../model/DmgConsultation"
import { DmgNotification } from "../model/DmgNotification"
import { DmgRegistration } from "../model/DmgRegistration"
import { DmgsList } from "../model/DmgsList"
import { GenAsyncResponse } from "../model/GenAsyncResponse"

export class fhcDmgApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError) {
    throw e
  }

  /**
   *
   * @summary confirmAcks
   * @param body dmgAcksHashes
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   */
  confirmAcksUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    body?: Array<string>
  ): Promise<boolean | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/gmd/confirm/acks` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary confirmDmgMessages
   * @param body dmgMessagesHashes
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   */
  confirmDmgMessagesUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    body?: Array<string>
  ): Promise<boolean | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/gmd/confirm/messages` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary consultDmg
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientSsin patientSsin
   * @param patientGender patientGender
   * @param oa oa
   * @param regNrWithMut regNrWithMut
   * @param requestDate requestDate
   */
  consultDmgUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientSsin?: string,
    patientGender?: string,
    oa?: string,
    regNrWithMut?: string,
    requestDate?: number
  ): Promise<DmgConsultation | any> {
    let _body = null

    const _url =
      this.host +
      `/gmd` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (oa ? "&oa=" + encodeURIComponent(String(oa)) : "") +
      (regNrWithMut ? "&regNrWithMut=" + encodeURIComponent(String(regNrWithMut)) : "") +
      (requestDate ? "&requestDate=" + encodeURIComponent(String(requestDate)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new DmgConsultation(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getDmgMessages
   * @param body messageNames
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   */
  getDmgMessagesUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    body?: Array<string>
  ): Promise<DmgsList | any> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/gmd/messages` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new DmgsList(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary notifyDmg
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientSsin patientSsin
   * @param oa oa
   * @param regNrWithMut regNrWithMut
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param nomenclature nomenclature
   * @param requestDate requestDate
   * @param traineeSupervisorSsin traineeSupervisorSsin
   * @param traineeSupervisorNihii traineeSupervisorNihii
   * @param traineeSupervisorFirstName traineeSupervisorFirstName
   * @param traineeSupervisorLastName traineeSupervisorLastName
   */
  notifyDmgUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientSsin?: string,
    oa?: string,
    regNrWithMut?: string,
    patientFirstName?: string,
    patientLastName?: string,
    patientGender?: string,
    nomenclature: string,
    requestDate?: number,
    traineeSupervisorSsin?: string,
    traineeSupervisorNihii?: string,
    traineeSupervisorFirstName?: string,
    traineeSupervisorLastName?: string
  ): Promise<DmgNotification | any> {
    let _body = null

    const _url =
      this.host +
      `/gmd/notify/${encodeURIComponent(String(nomenclature))}` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (oa ? "&oa=" + encodeURIComponent(String(oa)) : "") +
      (regNrWithMut ? "&regNrWithMut=" + encodeURIComponent(String(regNrWithMut)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (requestDate ? "&requestDate=" + encodeURIComponent(String(requestDate)) : "") +
      (traineeSupervisorSsin
        ? "&traineeSupervisorSsin=" + encodeURIComponent(String(traineeSupervisorSsin))
        : "") +
      (traineeSupervisorNihii
        ? "&traineeSupervisorNihii=" + encodeURIComponent(String(traineeSupervisorNihii))
        : "") +
      (traineeSupervisorFirstName
        ? "&traineeSupervisorFirstName=" + encodeURIComponent(String(traineeSupervisorFirstName))
        : "") +
      (traineeSupervisorLastName
        ? "&traineeSupervisorLastName=" + encodeURIComponent(String(traineeSupervisorLastName))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new DmgNotification(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary postDmgsListRequest
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param oa oa
   * @param requestDate requestDate
   */
  postDmgsListRequestUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    oa?: string,
    requestDate?: number
  ): Promise<GenAsyncResponse | any> {
    let _body = null

    const _url =
      this.host +
      `/gmd/reqlist` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (oa ? "&oa=" + encodeURIComponent(String(oa)) : "") +
      (requestDate ? "&requestDate=" + encodeURIComponent(String(requestDate)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new GenAsyncResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary registerDoctor
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param oa oa
   * @param bic bic
   * @param iban iban
   */
  registerDoctorUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    oa: string,
    bic: string,
    iban: string
  ): Promise<DmgRegistration | any> {
    let _body = null

    const _url =
      this.host +
      `/gmd/register/${encodeURIComponent(String(oa))}` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (bic ? "&bic=" + encodeURIComponent(String(bic)) : "") +
      (iban ? "&iban=" + encodeURIComponent(String(iban)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new DmgRegistration(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}

/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { EfactMessage } from "../model/EfactMessage"
import { EfactSendResponse } from "../model/EfactSendResponse"
import { FlatFileWithMetadata } from "../model/FlatFileWithMetadata"
import { InvoicesBatch } from "../model/InvoicesBatch"

export class fhcEfactApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary confirmAcks
   * @param body valueHashes
   * @param nihii nihii
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param ssin ssin
   * @param firstName firstName
   * @param lastName lastName
   */
  confirmAcksUsingPUT(
    nihii: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ssin: string,
    firstName: string,
    lastName: string,
    body?: Array<string>
  ): Promise<boolean> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/efact/confirm/acks/${encodeURIComponent(String(nihii))}` +
      "?ts=" +
      new Date().getTime() +
      (ssin ? "&ssin=" + encodeURIComponent(String(ssin)) : "") +
      (firstName ? "&firstName=" + encodeURIComponent(String(firstName)) : "") +
      (lastName ? "&lastName=" + encodeURIComponent(String(lastName)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary confirmMessages
   * @param body valueHashes
   * @param nihii nihii
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param ssin ssin
   * @param firstName firstName
   * @param lastName lastName
   */
  confirmMessagesUsingPUT(
    nihii: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ssin: string,
    firstName: string,
    lastName: string,
    body?: Array<string>
  ): Promise<boolean> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/efact/confirm/msgs/${encodeURIComponent(String(nihii))}` +
      "?ts=" +
      new Date().getTime() +
      (ssin ? "&ssin=" + encodeURIComponent(String(ssin)) : "") +
      (firstName ? "&firstName=" + encodeURIComponent(String(firstName)) : "") +
      (lastName ? "&lastName=" + encodeURIComponent(String(lastName)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary loadMessages
   * @param nihii nihii
   * @param language language
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param ssin ssin
   * @param firstName firstName
   * @param lastName lastName
   * @param limit limit
   */
  loadMessagesUsingGET(
    nihii: string,
    language: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ssin: string,
    firstName: string,
    lastName: string,
    limit: number
  ): Promise<Array<EfactMessage>> {
    let _body = null

    const _url =
      this.host +
      `/efact/${encodeURIComponent(String(nihii))}/${encodeURIComponent(String(language))}` +
      "?ts=" +
      new Date().getTime() +
      (ssin ? "&ssin=" + encodeURIComponent(String(ssin)) : "") +
      (firstName ? "&firstName=" + encodeURIComponent(String(firstName)) : "") +
      (lastName ? "&lastName=" + encodeURIComponent(String(lastName)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new EfactMessage(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary makeFlatFileCore
   * @param body batch
   */
  makeFlatFileCoreUsingPOST(body?: InvoicesBatch): Promise<FlatFileWithMetadata> {
    let _body = null
    _body = body

    const _url = this.host + `/efact/flatcore` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new FlatFileWithMetadata(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary makeFlatFileTest
   * @param body batch
   */
  makeFlatFileTestUsingPOST(body?: InvoicesBatch): Promise<string> {
    let _body = null
    _body = body

    const _url = this.host + `/efact/flat/test` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary makeFlatFile
   * @param body batch
   */
  makeFlatFileUsingPOST(body?: InvoicesBatch): Promise<string> {
    let _body = null
    _body = body

    const _url = this.host + `/efact/flat` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary sendBatch
   * @param body batch
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   */
  sendBatchUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    body?: InvoicesBatch
  ): Promise<EfactSendResponse> {
    let _body = null
    _body = body

    const _url = this.host + `/efact/batch` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new EfactSendResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}

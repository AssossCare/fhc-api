/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { HealthcareParty } from "../model/HealthcareParty"

export class fhcAddressbookApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError) {
    throw e
  }

  /**
   *
   * @summary getHcpByNihii
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param nihii nihii
   * @param language language
   */
  getHcpByNihiiUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    nihii: string,
    language?: string
  ): Promise<HealthcareParty | any> {
    let _body = null

    const _url =
      this.host +
      `/ab/hcp/nihii/${encodeURIComponent(String(nihii))}` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthcareParty(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getHcpBySsin
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param ssin ssin
   * @param quality quality
   * @param language language
   */
  getHcpBySsinUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ssin: string,
    quality?: string,
    language?: string
  ): Promise<HealthcareParty | any> {
    let _body = null

    const _url =
      this.host +
      `/ab/hcp/ssin/${encodeURIComponent(String(ssin))}` +
      "?ts=" +
      new Date().getTime() +
      (quality ? "&quality=" + encodeURIComponent(String(quality)) : "") +
      (language ? "&language=" + encodeURIComponent(String(language)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthcareParty(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getOrgByCbe
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param cbe cbe
   * @param language language
   */
  getOrgByCbeUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    cbe: string,
    language?: string
  ): Promise<HealthcareParty | any> {
    let _body = null

    const _url =
      this.host +
      `/ab/org/cbe/${encodeURIComponent(String(cbe))}` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthcareParty(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getOrgByEhp
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param ehp ehp
   * @param language language
   */
  getOrgByEhpUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ehp: string,
    language?: string
  ): Promise<HealthcareParty | any> {
    let _body = null

    const _url =
      this.host +
      `/ab/org/ehp/${encodeURIComponent(String(ehp))}` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthcareParty(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getOrgByNihii
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param nihii nihii
   * @param language language
   */
  getOrgByNihiiUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    nihii: string,
    language?: string
  ): Promise<HealthcareParty | any> {
    let _body = null

    const _url =
      this.host +
      `/ab/org/nihii/${encodeURIComponent(String(nihii))}` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthcareParty(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary searchHcp
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param lastName lastName
   * @param firstName firstName
   * @param type type
   */
  searchHcpUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    lastName: string,
    firstName?: string,
    type?: string
  ): Promise<Array<HealthcareParty> | any> {
    let _body = null

    const _url =
      this.host +
      `/ab/search/hcp/${encodeURIComponent(String(lastName))}` +
      "?ts=" +
      new Date().getTime() +
      (firstName ? "&firstName=" + encodeURIComponent(String(firstName)) : "") +
      (type ? "&type=" + encodeURIComponent(String(type)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new HealthcareParty(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary searchOrg
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param name name
   * @param type type
   */
  searchOrgUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    name: string,
    type?: string
  ): Promise<Array<HealthcareParty> | any> {
    let _body = null

    const _url =
      this.host +
      `/ab/search/org/${encodeURIComponent(String(name))}` +
      "?ts=" +
      new Date().getTime() +
      (type ? "&type=" + encodeURIComponent(String(type)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new HealthcareParty(it)))
      .catch(err => this.handleError(err))
  }
}

/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"

export class fhcCryptoApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary Decrypt data
   * @param encryptedData
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCPassPhrase X-FHC-passPhrase
   */
  decryptFileUsingPOST(
    encryptedData: ArrayBuffer | any[],
    xFHCKeystoreId: string,
    xFHCPassPhrase: string
  ): Promise<ArrayBuffer> {
    let _body = null
    if (encryptedData && !_body) {
      const parts = Array.isArray(encryptedData)
        ? (encryptedData as any[])
        : [encryptedData as ArrayBuffer]
      const _blob = new Blob(parts, { type: "application/octet-stream" })
      _body = new FormData().append("encryptedData", _blob)
    }

    const _url = this.host + `/crypto/decryptFile` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "multipart/form-data"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Decrypt data
   * @param body encryptedData
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCPassPhrase X-FHC-passPhrase
   */
  decryptUsingPOST(
    xFHCKeystoreId: string,
    xFHCPassPhrase: string,
    body?: string
  ): Promise<ArrayBuffer> {
    let _body = null
    _body = body

    const _url = this.host + `/crypto/decrypt` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/octet-stream"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Encrypt data
   * @param plainData
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param identifier identifier
   * @param id id
   * @param applicationId applicationId
   */
  encryptFileUsingPOST(
    plainData: ArrayBuffer | any[],
    xFHCKeystoreId: string,
    xFHCPassPhrase: string,
    identifier: string,
    id: string,
    applicationId?: string
  ): Promise<ArrayBuffer> {
    let _body = null
    if (plainData && !_body) {
      const parts = Array.isArray(plainData) ? (plainData as any[]) : [plainData as ArrayBuffer]
      const _blob = new Blob(parts, { type: "application/octet-stream" })
      _body = new FormData().append("plainData", _blob)
    }

    const _url =
      this.host +
      `/crypto/encryptFile/${encodeURIComponent(String(identifier))}/${encodeURIComponent(
        String(id)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (applicationId ? "&applicationId=" + encodeURIComponent(String(applicationId)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "multipart/form-data"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary Encrypt data
   * @param body plainData
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param identifier identifier
   * @param id id
   * @param applicationId applicationId
   */
  encryptUsingPOST(
    xFHCKeystoreId: string,
    xFHCPassPhrase: string,
    identifier: string,
    id: string,
    applicationId?: string,
    body?: string
  ): Promise<ArrayBuffer> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/crypto/encrypt/${encodeURIComponent(String(identifier))}/${encodeURIComponent(
        String(id)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (applicationId ? "&applicationId=" + encodeURIComponent(String(applicationId)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/octet-stream"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
}

/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { ModelAndView } from "../model/ModelAndView"

export class fhcBasicErrorApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError) {
    throw e
  }

  /**
   *
   * @summary errorHtml
   */
  errorHtmlUsingDELETE(): Promise<ModelAndView | any> {
    let _body = null

    const _url = this.host + `/error` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new ModelAndView(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary errorHtml
   */
  errorHtmlUsingGET(): Promise<ModelAndView | any> {
    let _body = null

    const _url = this.host + `/error` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new ModelAndView(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary errorHtml
   */
  errorHtmlUsingHEAD(): Promise<ModelAndView | any> {
    let _body = null

    const _url = this.host + `/error` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("HEAD", _url, headers, _body, this.fetchImpl)
      .then(doc => new ModelAndView(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary errorHtml
   */
  errorHtmlUsingOPTIONS(): Promise<ModelAndView | any> {
    let _body = null

    const _url = this.host + `/error` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("OPTIONS", _url, headers, _body, this.fetchImpl)
      .then(doc => new ModelAndView(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary errorHtml
   */
  errorHtmlUsingPATCH(): Promise<ModelAndView | any> {
    let _body = null

    const _url = this.host + `/error` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("PATCH", _url, headers, _body, this.fetchImpl)
      .then(doc => new ModelAndView(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary errorHtml
   */
  errorHtmlUsingPOST(): Promise<ModelAndView | any> {
    let _body = null

    const _url = this.host + `/error` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new ModelAndView(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary errorHtml
   */
  errorHtmlUsingPUT(): Promise<ModelAndView | any> {
    let _body = null

    const _url = this.host + `/error` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new ModelAndView(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
